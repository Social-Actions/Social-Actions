'''
Generate features for users in the timeline

usage: python user_features.py <sorted_message_features>

features are generated by features.py
features must be sorted. This can be done with unix sort program
sort -k2n,2 -k3n,3 -k1n,1 <message_features> > <sorted_message_features>

output format:
0. user_id
1. mean number of friends in timeline
2. standard deviation of number of friends in timeline
3. mean number of followers in timeline
4. standard deviation of number of followers in timeline
5. number of days on twitter
6. total number of statuses by user
7. total number of statuses favorited by user
8. mean spacing between statuses in seconds in timeline
9. standard deviation of spacing between statuses in seconds in timeline
10. fraction of statuses in timeline that are retweets
11. fraction of statuses in timeline that are directed
12. number of statuses in timeline
13. mean number of urls in statuses in timeline
14. standard deviation of number of urls in statuses in timeline
15. mean number of hashtags in statuses in timeline
16. standard deviation of number of hashtags in statuses in timeline
17. mean number of mentions in statuses in timeline
18. standard deviation of number of mentions in statuses in timeline
19. mean text length in timeline
14. standard deviation of text length in timeline

'''

import sys

last = '0'
user = ''
url = []
hash = []
mention = []
followers = []
following = []
age = ''
tweets = ''
favorited = ''
spacing = []
retweets = 0
directed = 0
n = 0.0
text = []

""" Calculate mean and standard deviation of data x[]:
	mean = {\sum_i x_i \over n}
	std = sqrt(\sum_i (x_i - mean)^2 \over n-1)
"""
def meanstdv(x):
	from math import sqrt
	n, mean, std = len(x), 0, 0
	for a in x:
		mean = mean + a
	mean = mean / float(n)
	if n == 1:
		return mean, 0
	for a in x:
		std = std + (a - mean)**2
	std = sqrt(std / float(n-1))
	return mean, std 


def print_feat():
	global user, url, hash, mention, followers, following, \
	age, tweets, favorited, spacing, retweets, directed, text, n
	if len(spacing)>1: spacing.remove(0)
	url_m, url_s = meanstdv(url)
	hash_m, hash_s = meanstdv(hash)
	mention_m, mention_s = meanstdv(mention)
	followers_m, followers_s = meanstdv(followers)
	following_m, following_s = meanstdv(following)
	spacing_m, spacing_s = meanstdv(spacing)
	text_m, text_s = meanstdv(text)
	print '%s %.2f %.2f %.2f %.2f %s %s %s %.2f %.2f %.2f %.2f %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f' \
	%(user,following_m,following_s,followers_m,followers_s,age,tweets,favorited, \
	spacing_m,spacing_s,(retweets/n),(directed/n),n,url_m,url_s,hash_m,hash_s, \
	mention_m,mention_s,text_m,text_s)
	url = []
	hash = []
	mention = []
	followers = []
	following = []
	age = tweets = favorited = ''
	text = []
	spacing = []
	retweets = directed = n = 0.0
	
	
def add_to_feat(columns):
	global user, url, hash, mention, followers, following, \
	age, tweets, favorited, spacing, retweets, directed, text, n
	user = columns[1]
	url.append(int(columns[3]))
	hash.append(int(columns[4]))
	mention.append(int(columns[5]))
	followers.append(int(columns[6]))
	following.append(int(columns[7]))
	age =columns[8]
	tweets = columns[9]
	favorited = columns[10]
	text.append(int(columns[11]))
	retweets += int(columns[12])
	spacing.append(int(last)-(int(columns[13])))
	if columns[2]!='None': directed+=1
	n+=1
	
	
def main(argv):
	filename = argv[0]
	current = ''
	global last
	for line in open(filename):
		columns = line.split(' ')
		if not columns[1] == current:
			last = columns[-1]
			if current: print_feat()
		add_to_feat(columns)
		last = columns[-1]
		current = columns[1]
	print_feat()

if __name__ == '__main__':
    main(sys.argv[1:])
